{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","data/options.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","type","data-feedback","onClick","Statistics","good","neutral","bad","total","positiveFeedback","Notification","message","App","state","handleFeedback","feedback","target","dataset","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"kOAeeA,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCgBQC,EApBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GACjB,OACE,wBAEEC,KAAK,SACLC,gBAAeF,EACfG,QAASL,EAJX,SAMGE,GALIA,OCgBEI,EApBI,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBAC/C,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WCCSC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCFEd,EADC,CAAC,OAAQ,UAAW,OC+DrBe,E,4MAvDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,eAAiB,YAAiB,IACxBC,EADuB,EAAbC,OACUC,QAApBF,SAER,EAAKG,UAAS,SAAAC,GAAS,sBACpBJ,EAAWI,EAAUJ,GAAY,O,EAItCK,mBAAqB,WAAO,IAAD,EACM,EAAKP,MACpC,OAFyB,EACjBR,KADiB,EACXC,QADW,EACFC,K,EAIzBc,gCAAkC,WAChC,IAAMb,EAAQ,EAAKY,qBACXf,EAAS,EAAKQ,MAAdR,KACR,OAAOG,EAAQc,KAAKC,MAAOlB,EAAOG,EAAS,KAAO,G,uDAG1C,IAAD,EACwBgB,KAAKX,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQgB,KAAKJ,qBACbX,EAAmBe,KAAKH,kCAC9B,OACE,qCACE,cAAC,EAAD,CAAS3B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAASA,EACTC,gBAAiB0B,KAAKV,mBAG1B,cAAC,EAAD,CAASpB,MAAM,aAAf,SACGc,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,iBAAkBA,IAGpB,cAAC,EAAD,CAAcE,QAAQ,+B,GAhDhBc,aCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,Y","file":"static/js/main.06bcc2a5.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return options.map(option => {\r\n    return (\r\n      <button\r\n        key={option}\r\n        type=\"button\"\r\n        data-feedback={option}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        {option}\r\n      </button>\r\n    );\r\n  });\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positiveFeedback }) => {\r\n  return (\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positiveFeedback}%</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positiveFeedback: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","const options = ['good', 'neutral', 'bad'];\r\nexport default options;\r\n","import React, { Component } from 'react';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\nimport options from './data/options';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n\n    this.setState(prevState => ({\n      [feedback]: prevState[feedback] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    const { good } = this.state;\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positiveFeedback = this.countPositiveFeedbackPercentage();\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {total ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positiveFeedback={positiveFeedback}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}